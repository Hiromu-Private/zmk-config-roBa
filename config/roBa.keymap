#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角
#define MOUSE 4 // 各自のマウスレイヤーに合わせて設定
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100  // #includeのあとのあたりにスクロール量を変更

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&sl { release-after-ms = <250>; };

&lt {
    tapping-term-ms = <150>;
    flavor = "balanced";
    hold-while-undecided;
    hold-while-undecided-linger;
}; // ダブルクリックに必要な時間を設定
/ {
    combos {
        compatible = "zmk,combos";

        copy-chatGPT {
            bindings = <&select_copy LG(A) LG(C)>;
            key-positions = <27 26>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <21 20>;
        };

        alfred {
            bindings = <&kp LC(SPACE)>;
            key-positions = <10 38>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        browser_back: browser_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT_ARROW)>;
            label = "BROWSER_BACK";
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 0>;

            label = "MKP_EXIT_AML";
        };

        zoom_in: zoom_in {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(PLUS)>;
            label = "ZOOM_IN";
        };

        select_copy: SELECT_AND_COPY {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_wait_time 50>,
                <&macro_press>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>;

            label = "SELECT_AND_COPY";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_z_custom: mt_z_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_Z_CUSTOM";
            #binding-cells = <2>;
            flavor = "balanced";
            quick-tap-ms = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp>, <&kp>;

            retro-tap;
            hold-trigger-key-positions = <37 24 12 13 11 25>;
            hold-while-undecided;
        };

        // 新しいスクロール動作の追加

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        mt_comand_custom: mt_comand_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_COMAND_CUSTOM";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <120>;
            bindings = <&kp>, <&kp>;

            hold-while-undecided;
            quick-tap-ms = <0>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
            label = "NEW_BEHAVIOR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                      &kp W         &kp E         &kp R                            &kp T                                    &kp Y                    &kp U  &kp I     &kp O     &kp P
&mt LEFT_CONTROL A         &kp S         &kp D         &kp F                            &kp G        &mkp MB3       &kp MINUS    &kp H                    &kp J  &kp K     &kp L     &lt 5 ENTER
&mt_z_custom LEFT_SHIFT Z  &kp X         &kp C         &kp V                            &kp B        &kp COMMA      &kp COMMA    &kp N                    &kp M  &mkp MB1  &mkp MB2  &kp BACKSPACE
&kp LEFT_SHIFT             &kp LEFT_WIN  &kp LEFT_ALT  &mt_z_custom LEFT_COMMAND LANG2  &lt 2 SPACE  &lt 3 TAB      &lt 3 SPACE  &mt RIGHT_COMMAND LANG1                             &kp ESC
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp JP_DQUOTE  &kp HASH  &kp DOLLAR   &kp PERCENT                                     &kp JP_AMPERSAND  &kp JP_QUOTE       &kp JP_LPAREN    &kp JP_RPAREN    &kp MINUS
&trans           &trans         &trans    &kp JP_PLUS  &kp ASTERISK  &mkp MB3       &kp JP_UNDERSCORE  &kp SEMICOLON     &kp JP_COLON       &kp JP_LBRACKET  &kp JP_RBRACKET  &kp JP_CARET
&trans           &trans         &trans    &kp MINUS    &kp PERIOD    &kp EQUAL      &trans             &kp JP_AT         &kp JP_UNDERSCORE  &kp COMMA        &kp PERIOD       &kp SLASH
&trans           &trans         &trans    &trans       &trans        &trans         &trans             &trans                                                                 &kp JP_PIPE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &kp N7  &kp N8      &kp N9     &kp JP_YEN                            &trans         &kp HOME        &kp UP_ARROW    &kp END          &trans
&kp SLASH   &kp N4  &kp N5      &kp N6     &kp JP_COLON   &mkp MB3       &trans  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp PERIOD  &kp N1  &kp N2      &kp N3     &kp SEMICOLON  &trans         &trans  &trans         &trans          &trans          &trans           &trans
&trans      &kp N0  &kp PERIOD  &kp COMMA  &kp N0         &kp MINUS      &trans  &trans                                                          &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q              &to_layer_0 W             &to_layer_0 E         &to_layer_0 R                         &to_layer_0 T                                               &to_layer_0 Y            &to_layer_0 U  &to_layer_0 I      &to_layer_0 O      &to_layer_0 P
&mt LEFT_CONTROL A         &to_layer_0 S             &to_layer_0 D         &to_layer_0 F                         &to_layer_0 G  &mkp MB3               &to_layer_0 MINUS     &to_layer_0 H            &to_layer_0 J  &to_layer_0 K      &to_layer_0 L      &lt_to_layer_0 5 ENTER
&mt_z_custom LEFT_SHIFT Z  &to_layer_0 X             &to_layer_0 C         &to_layer_0 V                         &to_layer_0 B  &to_layer_0 COLON      &to_layer_0 QUESTION  &to_layer_0 N            &to_layer_0 M  &mkp_exit_AML MB1  &mkp_exit_AML MB2  &lt 5 BACKSPACE
&to_layer_0 LEFT_SHIFT     &to_layer_0 LEFT_COMMAND  &to_layer_0 LEFT_ALT  &mt_comand_custom LEFT_COMMAND LANG2  &lt 2 SPACE    &lt 3 TAB              &lt 3 SPACE           &mt RIGHT_COMMAND LANG1                                                       &to_layer_0 ESCAPE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SCROLL {
            bindings = <
&trans             &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans  &kp LA(LS(T))                                &kp LA(LS(Y))  &trans                  &kp LC(UP_ARROW)     &kp LA(LG(LS(L)))    &trans
&trans             &trans                &kp LC(LEFT_ARROW)    &trans  &trans         &kp LG(NUMBER_0)      &trans  &trans         &kp LG(LA(UP_ARROW))    &kp LC(RIGHT_ARROW)  &kp RIGHT_SHIFT      &trans
&trans             &trans                &trans                &trans  &trans         &trans                &trans  &trans         &kp LA(LG(DOWN_ARROW))  &kp LG(LEFT_ARROW)   &kp LG(RIGHT_ARROW)  &trans
&kp LA(LS(LG(M)))  &kp LA(LS(LG(V)))     &trans                &trans  &trans         &trans                &trans  &trans                                                                           &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(PLUS) LG(JP_PLUS)>;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        Sym_Num {
            bindings = <
&kp EXCLAMATION  &kp JP_DQUOTE  &kp HASH      &kp DOLLAR    &kp PERCENT                       &kp JP_AMPERSAND  &kp JP_QUOTE     &kp JP_EQUAL      &kp JP_CARET       &kp JP_YEN
&kp NUMBER_1     &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &trans      &trans  &kp JP_PLUS       &kp JP_TILDE     &kp JP_PIPE       &kp JP_AT          &kp JP_COLON
&kp NUMBER_6     &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans      &trans  &none             &kp JP_ASTERISK  &kp JP_BACKQUOTE  &kp JP_UNDERSCORE  &kp SEMICOLON
&trans           &trans         &trans        &trans        &trans        &trans      &trans  &trans                                                                  &trans
            >;
        };
    };
};
