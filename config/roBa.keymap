#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4 // 各自のマウスレイヤーに合わせて設定

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&sl { release-after-ms = <250>; }; // ダブルクリックに必要な時間を設定
/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        browser_back: browser_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT_ARROW)>;
            label = "BROWSER_BACK";
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl MOUSE>;

            label = "MKP_EXIT_AML";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_z_custom: mt_z_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_Z_CUSTOM";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            quick-tap-ms = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                      &kp W         &kp E         &kp R                   &kp T                                        &kp Y                    &kp U  &lt 5 I   &kp O     &kp P
&mt LEFT_CONTROL A         &kp S         &kp D         &kp F                   &kp G        &kp LS(LG(S))      &kp MINUS    &kp H                    &kp J  &kp K     &kp L     &lt 5 ENTER
&mt_z_custom LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B        &kp COMMA          &kp PERIOD   &kp N                    &kp M  &mkp MB1  &mkp MB2  &kp BACKSPACE
&kp LEFT_SHIFT             &kp LEFT_WIN  &kp LEFT_ALT  &mt LEFT_COMMAND LANG2  &lt 2 SPACE  &lt 3 TAB          &lt 3 SPACE  &mt RIGHT_COMMAND LANG1                             &kp ESC
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION             &kp DOUBLE_QUOTES  &kp HASH         &kp DOLLAR       &kp PERCENT                                                &kp AMPERSAND  &kp SQT    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS
&kp SLASH                   &kp KP_NUMBER_4    &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp SEMICOLON  &kp COLON  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LCTRL
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1    &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp AT         &kp UNDER  &kp COMMA             &kp PERIOD             &kp SLASH
&trans                      &trans             &trans           &trans           &trans        &trans                       &trans          &trans                                                                 &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans                             &trans         &kp HOME        &kp UP_ARROW    &kp END          &trans
&kp HOME        &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp COLON      &trans      &trans  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_SHIFT  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp SEMICOLON  &trans      &trans  &trans         &trans          &trans          &trans           &trans
&trans          &kp KP_N0  &trans     &trans     &trans         &trans      &trans  &trans                                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q           &to_layer_0 W             &to_layer_0 E         &to_layer_0 R           &to_layer_0 T                                               &to_layer_0 Y      &to_layer_0 U  &to_layer_0 I      &to_layer_0 O      &to_layer_0 P
&to_layer_0 A           &to_layer_0 S             &to_layer_0 D         &to_layer_0 F           &to_layer_0 G  &to_layer_0 LG(C)      &to_layer_0 MINUS     &to_layer_0 H      &to_layer_0 J  &to_layer_0 K      &to_layer_0 L      &lt_to_layer_0 5 ENTER
&to_layer_0 Z           &to_layer_0 X             &to_layer_0 C         &to_layer_0 V           &to_layer_0 B  &to_layer_0 COLON      &to_layer_0 QUESTION  &to_layer_0 N      &to_layer_0 M  &mkp_exit_AML MB1  &mkp_exit_AML MB2  &lt 5 BACKSPACE
&to_layer_0 LEFT_SHIFT  &to_layer_0 LEFT_COMMAND  &to_layer_0 LEFT_ALT  &mt LEFT_COMMAND LANG2  &lt 2 SPACE    &lt 3 TAB              &lt 3 SPACE           &to_layer_0 LANG1                                                       &to_layer_0 ESCAPE
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans              &kp LC(UP_ARROW)     &kp LA(LC(LG(L)))    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp RIGHT_SHIFT      &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans              &kp LG(LEFT_ARROW)   &kp LG(RIGHT_ARROW)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
