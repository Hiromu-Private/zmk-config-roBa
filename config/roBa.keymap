#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4 // 各自のマウスレイヤーに合わせて設定

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&sl {
    release-after-ms = <250>; // ダブルクリックに必要な時間を設定
};

&mkp_input_listener {
    input-processors = <&zip_temp_layer MOUSE 250>;
};

 / {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        browser_back: browser_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT_ARROW)>;
            label = "BROWSER_BACK";
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl MOUSE>;
            label = "MKP_EXIT_AML";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_scroll: encoder_scroll {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_SCROLL";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q               &kp W         &kp E         &kp R                   &kp T                                                                     &kp Y                    &kp U  &lt 5 I    &kp O    &kp P
                &mt LEFT_CONTROL A  &kp S         &kp D         &kp F                   &kp G                   &kp LS(LG(S))             &kp MINUS               &kp H                    &kp J  &kp K      &kp L    &lt_to_layer_0 5 ENTER
                &mt LEFT_SHIFT Z    &kp X         &kp C         &kp V                   &kp B                   &kp COLON                 &kp QUESTION            &kp N                    &kp M  &kp COMMA  &kp DOT  &lt 5 BACKSPACE
                &kp LCTRL           &kp LEFT_WIN  &kp LEFT_ALT  &mt LEFT_COMMAND LANG2  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 3 TAB      &lt_to_layer_0 3 SPACE  &mt RIGHT_COMMAND LANG1                             &kp ESC
            >;

            sensor-bindings = <&encoder_scroll>;
        };

        FUNCTION {
            bindings = <
                &trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
                &trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
                &trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
                &trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
                &kp 1 &kp 2 &kp 3 &kp 4 &kp 5 &kp 6 &kp 7 &kp 8 &kp 9 &kp 0
                &kp EXCLAMATION &kp AT_SIGN &kp HASH &kp DOLLAR &kp PERCENT &kp CARET &kp AMPERSAND &kp ASTERISK &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans &trans &trans &trans
            >;
        };

        ARROW {
            bindings = <
                &kp UP_ARROW &kp DOWN_ARROW &kp LEFT_ARROW &kp RIGHT_ARROW &trans
                &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans
                &trans &trans &trans &trans
            >;
            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
                &mkp_exit_AML LCLK     &mkp_exit_AML RCLK       &mkp_exit_AML MS_UP     &mkp_exit_AML MS_DOWN   &mkp_exit_AML MS_LEFT
                &mkp_exit_AML MS_RIGHT &trans                  &trans                  &trans                  &trans
                &trans                 &trans                  &trans                  &trans                  &trans
                &trans                 &trans                  &trans
            >;
        };

        SCROLL {
            bindings = <
                &kp HOME &kp END &kp PAGE_UP &kp PAGE_DOWN &trans
                &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans
                &trans &trans &trans &trans
            >;
        };

        layer_6 {
            bindings = <
                &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans
                &trans &trans &trans &trans
            >;
        };
    };
};
